1. User Registration
/* ----------------- CREATE ----------------- */
app.post('/api/users/register', (req, res) => {
    const { username, email, password } = req.body;

    // Check if email already exists
    if (users.find(u => u.email === email)) {
        return res.status(400).json({ error: "Email already exists" });
    }

    const newUser = {
        id: uuidv4(),
        username,
        email,
        password
    };
    users.push(newUser);

    res.status(201).json({
        message: "User registered successfully",
        user_id: newUser.id
    });
});

/* ----------------- READ ----------------- */
// Get all users
app.get('/api/users', (req, res) => {
    res.json(users);
});

// Get user by ID
app.get('/api/users/:id', (req, res) => {
    const user = users.find(u => u.id === req.params.id);
    if (!user) return res.status(404).json({ error: "User not found" });
    res.json(user);
});

/* ----------------- UPDATE ----------------- */
app.put('/api/users/:id', (req, res) => {
    const user = users.find(u => u.id === req.params.id);
    if (!user) return res.status(404).json({ error: "User not found" });

    const { username, email, password } = req.body;
    if (username) user.username = username;
    if (email) user.email = email;
    if (password) user.password = password;

    res.json({ message: "User updated successfully", user });
});

/* ----------------- DELETE ----------------- */
app.delete('/api/users/:id', (req, res) => {
    const index = users.findIndex(u => u.id === req.params.id);
    if (index === -1) return res.status(404).json({ error: "User not found" });

    users.splice(index, 1);
    res.json({ message: "User deleted successfully" });
});

2. User Login Authenticate
// POST /api/users/login
app.post("/api/users/login", async (req, res) => {
  const { email, password } = req.body;

  // Find user by email
  const user = users.find(u => u.email === email);
  if (!user) {
    return res.status(400).json({ error: "Invalid email or password" });
  }

  // Compare password
  const isMatch = await bcrypt.compare(password, user.passwordHash);
  if (!isMatch) {
    return res.status(400).json({ error: "Invalid email or password" });
  }

  // Success
  res.json({
    username: user.username,
    user_id: user.user_id
  });
});

3. Itinerary Generation
// server.js
const express = require("express");
const bodyParser = require("body-parser");
const { v4: uuidv4 } = require("uuid"); // For unique trip IDs

const app = express();
app.use(bodyParser.json());

// Temporary "database"
let trips = [];

/* ----------------- Helper: Validate date format----------------- */
function isValidDate(date) {
  return /^\d{4}-\d{2}-\d{2}$/.test(date);
}

/* -----------------CREATE (POST) - Generate a new itinerary----------------- */
app.post("/api/itinerary/generate", (req, res) => {
  const { start_date, end_date, destination, budget, food_choice, transport_mode } = req.body;

  // Validate inputs
  if (!isValidDate(start_date) || !isValidDate(end_date) || !destination) {
    return res.status(400).json({ error: "Invalid location or date format" });
  }

  const trip_id = uuidv4();

  // Simple generated itinerary example
  const itinerary = [
    {
      date: start_date,
      activities: [
        {
          type: "sightseeing",
          name: `Explore ${destination}`,
          details: "Visit main attractions",
          price: 100,
          location: "28.6139, 77.2090"
        }
      ]
    }
  ];

  const trip = {
    trip_id,
    start_date,
    end_date,
    destination,
    budget,
    food_choice,
    transport_mode,
    itinerary
  };

  trips.push(trip);

  res.status(201).json({
    message: "Trip created successfully",
    trip_id,
    itinerary
  });
});

/* -----------------READ (GET) - Get all trips----------------- */
app.get("/api/itinerary", (req, res) => {
  res.json(trips);
});

/* -----------------READ (GET) - Get a single trip by ID----------------- */
app.get("/api/itinerary/:id", (req, res) => {
  const trip = trips.find(t => t.trip_id === req.params.id);
  if (!trip) return res.status(404).json({ error: "Trip not found" });
  res.json(trip);
});

/* -----------------UPDATE (PUT) - Update a trip----------------- */
app.put("/api/itinerary/:id", (req, res) => {
  const trip = trips.find(t => t.trip_id === req.params.id);
  if (!trip) return res.status(404).json({ error: "Trip not found" });

  const { start_date, end_date, destination, budget, food_choice, transport_mode, itinerary } = req.body;

  // Update only provided fields
  if (start_date && !isValidDate(start_date)) return res.status(400).json({ error: "Invalid start date format" });
  if (end_date && !isValidDate(end_date)) return res.status(400).json({ error: "Invalid end date format" });

  if (start_date) trip.start_date = start_date;
  if (end_date) trip.end_date = end_date;
  if (destination) trip.destination = destination;
  if (budget) trip.budget = budget;
  if (food_choice) trip.food_choice = food_choice;
  if (transport_mode) trip.transport_mode = transport_mode;
  if (itinerary) trip.itinerary = itinerary;

  res.json({ message: "Trip updated successfully", trip });
});

/* -----------------DELETE - Remove a trip----------------- */
app.delete("/api/itinerary/:id", (req, res) => {
  const index = trips.findIndex(t => t.trip_id === req.params.id);
  if (index === -1) return res.status(404).json({ error: "Trip not found" });

  trips.splice(index, 1);
  res.json({ message: "Trip deleted successfully" });
});

// Start server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});

4. Get Itinerary Generation by ID
/* ----------------- CREATE ----------------- */
app.post('/api/itinerary', (req, res) => {
    const { trip_id, destination, itinerary } = req.body;

    // Check if trip_id already exists
    if (trips.find(t => t.trip_id === trip_id)) {
        return res.status(400).json({ error: "Trip ID already exists" });
    }

    const newTrip = {
        trip_id,
        destination,
        itinerary
    };
    trips.push(newTrip);

    res.status(201).json({
        message: "Itinerary created successfully",
        trip_id: newTrip.trip_id
    });
});

/* ----------------- READ ----------------- */
// Get all itineraries
app.get('/api/itinerary', (req, res) => {
    res.json(trips);
});

// Get itinerary by trip_id
app.get('/api/itinerary/:trip_id', (req, res) => {
    const trip = trips.find(t => t.trip_id === req.params.trip_id);
    if (!trip) return res.status(404).json({ error: "Trip not found" });
    res.json(trip);
});

/* ----------------- UPDATE ----------------- */
app.put('/api/itinerary/:trip_id', (req, res) => {
    const trip = trips.find(t => t.trip_id === req.params.trip_id);
    if (!trip) return res.status(404).json({ error: "Trip not found" });

    const { destination, itinerary } = req.body;
    if (destination) trip.destination = destination;
    if (itinerary) trip.itinerary = itinerary;

    res.json({ message: "Itinerary updated successfully", trip });
});

/* ----------------- DELETE ----------------- */
app.delete('/api/itinerary/:trip_id', (req, res) => {
    const index = trips.findIndex(t => t.trip_id === req.params.trip_id);
    if (index === -1) return res.status(404).json({ error: "Trip not found" });

    trips.splice(index, 1);
    res.json({ message: "Itinerary deleted successfully" });
});

5. Restaurant Suggestions
/* ----------------- CREATE ----------------- */
app.post('/api/restaurants', (req, res) => {
    const { name, rating, price_range, address, source } = req.body;

    // Optional: Prevent duplicate restaurant name & address
    if (restaurants.find(r => r.name === name && r.address === address)) {
        return res.status(400).json({ error: "Restaurant already exists" });
    }

    const newRestaurant = {
        id: uuidv4(),
        name,
        rating,
        price_range,
        address,
        source
    };
    restaurants.push(newRestaurant);

    res.status(201).json({
        message: "Restaurant added successfully",
        restaurant_id: newRestaurant.id
    });
});

/* ----------------- READ ----------------- */
// Get all restaurants
app.get('/api/restaurants', (req, res) => {
    if (restaurants.length === 0) {
        return res.status(404).json({ error: "No restaurants found" });
    }
    res.json(restaurants);
});

// Get restaurant by ID
app.get('/api/restaurants/:id', (req, res) => {
    const restaurant = restaurants.find(r => r.id === req.params.id);
    if (!restaurant) return res.status(404).json({ error: "Restaurant not found" });
    res.json(restaurant);
});

/* ----------------- UPDATE ----------------- */
app.put('/api/restaurants/:id', (req, res) => {
    const restaurant = restaurants.find(r => r.id === req.params.id);
    if (!restaurant) return res.status(404).json({ error: "Restaurant not found" });

    const { name, rating, price_range, address, source } = req.body;
    if (name) restaurant.name = name;
    if (rating) restaurant.rating = rating;
    if (price_range) restaurant.price_range = price_range;
    if (address) restaurant.address = address;
    if (source) restaurant.source = source;

    res.json({ message: "Restaurant updated successfully", restaurant });
});

/* ----------------- DELETE ----------------- */
app.delete('/api/restaurants/:id', (req, res) => {
    const index = restaurants.findIndex(r => r.id === req.params.id);
    if (index === -1) return res.status(404).json({ error: "Restaurant not found" });

    restaurants.splice(index, 1);
    res.json({ message: "Restaurant deleted successfully" });
});

6. Hotel Suggestions
/* ----------------- CREATE ----------------- */
app.post('/api/hotels', (req, res) => {
    const { name, price_per_night, rating, address, source } = req.body;

    // Prevent duplicate hotel name + address
    if (hotels.find(h => h.name === name && h.address === address)) {
        return res.status(400).json({ error: "Hotel already exists" });
    }

    const newHotel = {
        id: uuidv4(),
        name,
        price_per_night,
        rating,
        address,
        source
    };
    hotels.push(newHotel);

    res.status(201).json({
        message: "Hotel added successfully",
        hotel_id: newHotel.id
    });
});

/* ----------------- READ ----------------- */
// Get all hotels
app.get('/api/hotels', (req, res) => {
    if (hotels.length === 0) {
        return res.status(404).json({ error: "No Hotels found" });
    }
    res.json(hotels);
});

// Get hotel by ID
app.get('/api/hotels/:id', (req, res) => {
    const hotel = hotels.find(h => h.id === req.params.id);
    if (!hotel) return res.status(404).json({ error: "Hotel not found" });
    res.json(hotel);
});

/* ----------------- UPDATE ----------------- */
app.put('/api/hotels/:id', (req, res) => {
    const hotel = hotels.find(h => h.id === req.params.id);
    if (!hotel) return res.status(404).json({ error: "Hotel not found" });

    const { name, price_per_night, rating, address, source } = req.body;
    if (name) hotel.name = name;
    if (price_per_night) hotel.price_per_night = price_per_night;
    if (rating) hotel.rating = rating;
    if (address) hotel.address = address;
    if (source) hotel.source = source;

    res.json({ message: "Hotel updated successfully", hotel });
});

/* ----------------- DELETE ----------------- */
app.delete('/api/hotels/:id', (req, res) => {
    const index = hotels.findIndex(h => h.id === req.params.id);
    if (index === -1) return res.status(404).json({ error: "Hotel not found" });

    hotels.splice(index, 1);
    res.json({ message: "Hotel deleted successfully" });
});

